# Logging.
onelog = require 'onelog'
log4js = require 'log4js'
onelog.use onelog.Log4js
logger = onelog.get()

_ = require 'underscore'
async = require 'async'

{ComLaw} = require '../lib/comlaw'

marriageAct = 'C1961A00012'

# TODO: Update with links.
fixtures =
  [
    {
      Title: 'Marriage Act 1961\r\n                                                Superseded',
      ComlawId: 'C2004C05246',
      'Date Prepared': '02/Aug/1991',
      'Start Date': '',
      'End Date': '',
      'Incorporating Amendments Up To': 'Act No. 71 of 1991',
      masterFile: '/Users/Vaughan/dev/opendemocracy/lib/parser/downloads/comlaw/markdown/C2004C05246.md'
    },
    {
      Title: 'Marriage Act 1961\r\n                                                Superseded',
      ComlawId: 'C2004C05245',
      'Date Prepared': '19/Dec/1973',
      'Start Date': '',
      'End Date': '',
      'Incorporating Amendments Up To': 'Act No. 216 of 1973',
      masterFile: '/Users/Vaughan/dev/opendemocracy/lib/parser/downloads/comlaw/markdown/C2004C05245.md'
    }
  ]

mkdirp = require 'mkdirp'
path = require 'path'
fs = require 'fs'
#gitteh = require 'gitteh'
git = require 'gift'

# TODO: Brittle.
parseActTitle = (title) ->
  a = (/(.*)/g.exec title)[0]
  a.replace /[ ]/g, '-'

commit = ->
    repo.commit

makeGitRepoFromActs = (acts, done) ->
  principalAct = acts[0]
  principalActTitle = parseActTitle principalAct.Title
  repoPath = path.join 'repos', principalActTitle
  require('wrench').rmdirSyncRecursive repoPath, true
  mkdirp.sync repoPath

  git.init repoPath, (e, repo) ->
    return done e if e

    # for each act we will copy the file into the repo, and make a commit
    # TODO: Bills must be sorted from earliest to latest.
    async.eachSeries acts, (act, done) ->

      # Copy file.
      src = act.masterFile
      dest = path.join repoPath, 'index.md'
      fs.createReadStream(src).pipe fs.createWriteStream(dest)

      # Make commit.
      latestAmendment = act['Incorporating Amendments Up To']
      subject = unless latestAmendment is 'No records to display.'
        "Incorporating amendments up to #{latestAmendment}"
      else
        "Current act as of #{act['Date Prepared']}"
      msg = """#{subject}

        Comlaw Id: #{act.ComlawId}
        Date Prepared: #{act['Date Prepared']}
        Comlaw Consolidated Act Link: #{act['Title Link'] or 'N/A'}
        Comlaw Amendment Link: #{act['Incorporating Amendments Up To Link'] or 'N/A'}

        Markdown automatically generated by OpenParliamentAu ComLaw Parser v0.0.1"""
      repo.add path.resolve(dest), (e) ->
        return done e if e
        repo.commit msg, {}, (e) ->
          logger.debug "Committed", msg
          return done e if e
          done()

      , (e) ->
        return done e if e
        logger.debug 'Done!'

main = ->

  ComLaw.actSeries marriageAct, (e, acts) =>
    throw e if e
    unless acts?.length
      return logger.debug 'No acts found'
    logger.debug acts
    async.each acts, (act, done) ->
      ComLaw.downloadActFiles act.ComlawId, (e, newFile) =>
        act.masterFile = newFile
        done()
    , (e) ->
      throw e if e
      logger.info 'Successfully finished downloading act series and files'
      logger.info acts
      makeGitRepoFromActs acts.reverse(), ->
        logger.info 'Finished!'

main()

#makeGitRepoFromActs fixtures

getAmendmentLinks = ->

  {ActSeriesPage} = require '../lib/actSeriesPage'
  page = new ActSeriesPage url: "http://www.comlaw.gov.au/Series/C1961A00012"
  page.scrape (e) ->
    throw e if e
    console.log page.getData().acts

#getAmendmentLinks()
